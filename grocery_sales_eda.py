# -*- coding: utf-8 -*-
"""Grocery Sales EDA.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1P5QsijaLm00Qkg-og8iVmwwVoPzXSlcw

# A Beginner's Guide to Perform Exploratory Data Analysis Using Grocery Sales Dataset
Introduction
The objective of this notebook is to use the simple functions in Pandas to analyze the grocery sales dataset and then visualize it using Seaborn. Apart from deriving some summary metrics, we'll also frame some questions and find answers from the dataset by delving into it. This will be a very good practise for data analytics enthusiasts.

# Table of Contents
Importing Libraries and Dataset
Data Manipulation
Preparing Summary Metrics
Answering the Questions
Conclusion
Importing Libraries and Dataset

We'll be using Pandas for data analysis and Matplotlib & Seaborn for data visualization.
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib inline

import warnings
warnings.filterwarnings('ignore')

import os

"""Let us read the input dataset and store it in a dataframe. After loading it, we'll take a look at any 5 rows from the dataframe to understand the data. We'll use sample() to extract few samples out of the dataframe.

Alternatively, you can use .head() or .tail() functions to extract the first N or the last N rows respectively.
"""

df=pd.read_csv('/content/Supermart Grocery Sales - Retail Analytics Dataset.csv')
df.sample(10)

"""Let's quickly check the information about the dataset"""

df.info()

"""We'll take a look at the Region column to understand the spread of different categories.

# Data Manipulation
"""

df['Region'].value_counts()

df['State'].value_counts()

"""As we see, there is only one datapoint for the North region. This might be added by mistake, so we'll drop the row. This is not going to make a big difference in the dataset."""

df.drop((df[df['Region']=='North']).index, inplace=True)

"""We'll now extract the year from the order date. The Order Date is in the string type, so let us use the string manipulation technique to do the same."""

df['Order Year'] = df['Order Date'].str[-4:]
df['Order Year'].value_counts()

"""#Preparing Summary Metrics

Let us prepare the summary metrics one by one. We'll start with the region wise analysis of sales and orders. We'll use pivot_table() function throughout this notebook. Please pay attention on how the aggfunc() could be tailored for our requirements.

#Total Sales & Orders by Region
"""

region = pd.pivot_table(data=df, index='Region', values=['Order ID', 'Sales'], 
               aggfunc = {'Order ID':'count', 'Sales':'sum'}).reset_index().sort_values(by='Sales', ascending=False)
region

"""We'll now plot two graphs to visualize the total sales and orders by each region. I did not not plot both the details in the same graph because of one reason. The range of each of the columns is very different. Our graph will look weird if we plot both the details in the same plot. We could rescale it to fit both of them within the same range, but that will change the actual values."""

# fixing the graph size
plt.rcParams['figure.figsize'] = (12,6)

# setting the background color
ax = plt.axes()
ax.set_facecolor('#2F2F2f')

# plotting a bar graph
sns.barplot(y='Region', x='Sales', data=region, color='#FFCB74', linewidth=2, edgecolor='#F6F6F6')

# annotating the values on the plot
bbox_args = dict(boxstyle = 'round', fc = '1')
for p in ax.patches:
    width = p.get_width()
    plt.text(p.get_width(), p.get_y() + 0.5 * p.get_height(), '{:1.0f}'.format(width), 
             ha = 'center', 
             va = 'center', 
             color = 'black', 
             bbox = bbox_args, 
             fontsize = 15)

# formatting the graph
plt.title('Total Sales (INR) by Region', fontsize = 18)
plt.tick_params(left=False, bottom=False, labelbottom=False)
plt.ylabel(None)

plt.show()

# fixing the graph size
plt.rcParams['figure.figsize'] = (12,6)

# setting the background color
ax = plt.axes()
ax.set_facecolor('#2F2F2f')

# plotting a bar graph
sns.barplot(y='Region', x='Order ID', data=region, color='#FFCB74', linewidth=2, edgecolor='#F6F6F6')

# annotating the values on the plot
bbox_args = dict(boxstyle = 'round', fc = '1')
for p in ax.patches:
    width = p.get_width()
    plt.text(p.get_width(), p.get_y() + 0.5 * p.get_height(), '{:1.0f}'.format(width), 
             ha = 'center', 
             va = 'center', 
             color = 'black', 
             bbox = bbox_args, 
             fontsize = 15)

# formatting the graph
plt.title('Total Orders by Region', fontsize = 18)
plt.tick_params(left=False, bottom=False, labelbottom=False)
plt.xlabel('#Orders')
plt.ylabel(None)

plt.show()

"""#Total Sales by Category & Sub Category
We'll now find the total sales by Category and further group it down to each Sub Category within it. We'll assign two values within the index parameter of the .pivot_table() function to achieve the results.
"""

category_sales = pd.pivot_table(data=df, index=['Category', 'Sub Category'], values='Sales', 
               aggfunc='sum').reset_index().sort_values(['Category', 'Sales'], ascending=False)
category_sales

# fixing the graph size
plt.rcParams['figure.figsize'] = (15,22)

# setting the background color
ax = plt.axes()
ax.set_facecolor('#2F2F2F')

# plotting a bar plot with Category as the distinguishing parameter
sns.barplot(y='Sub Category', x='Sales', data=category_sales, hue='Category', linewidth=1, edgecolor='#F6F6F6')

# annotating the values on the plot
bbox_args = dict(boxstyle = 'round', fc = '1')
for p in ax.patches:
    width = p.get_width()
    plt.text(p.get_width(), p.get_y() + 0.5 * p.get_height(), '{:1.0f}'.format(width), 
             ha = 'center', 
             va = 'center', 
             color = 'black', 
             bbox = bbox_args, 
             fontsize = 15)

# formatting the graph
plt.title('Sales by Category & Sub Category', fontsize = 18)
plt.ylabel(None)
plt.tick_params(left=False, bottom=False, labelbottom=False)
plt.show()

"""The hue parameter of the barplot() helped us distinguish the Sub Categories by the Category to which they belong to.

#Profit Margin by Sub Category
The profit margin can be calculated by dividing the profit by the total sales. As this needs to be computed for each sub category, we did not compute this on the original dataset. First let us group the data by sub category and then compute the profit margin.
"""

profit = pd.pivot_table(data=df, index='Sub Category', values=['Sales', 'Profit'], aggfunc='sum').reset_index()
profit['Profit Margin'] = round((profit['Profit']/profit['Sales']) * 100,2)
profit.sort_values(by='Profit Margin', ascending=False, inplace = True)
profit

# fixing the graph size
plt.rcParams['figure.figsize'] = (15,20)

# setting up the background color
ax = plt.axes()
ax.set_facecolor('#2F2F2F')

# plotting a bar graph
sns.barplot(y='Sub Category', x='Profit Margin', data=profit, color='#FFCB74', linewidth=2, edgecolor='#F6F6F6')

# annotating the values on the graph
bbox_args = dict(boxstyle = 'round', fc = '1')
for p in ax.patches:
    width = p.get_width()
    plt.text(p.get_width(), p.get_y() + 0.5 * p.get_height(), '{:1.2f}%'.format(width), 
             ha = 'center', 
             va = 'center', 
             color = 'black', 
             bbox = bbox_args, 
             fontsize = 15)

# formatting the graph
plt.title('Profit Margin by Sub Category', fontsize = 18)
plt.tick_params(left=False, bottom=False, labelbottom=False)
plt.ylabel(None)

plt.show()

"""#How much did the company lose by giving discounts?
To find the amount that the company lost by giving discounts, we need to find the original price. We've the sold price of the product in the dataset. We also have the discount percentage for that product.

The formula to find the original price is (Sold Price 100)/100 - (Discount Percent 100)
"""

df['Original Price'] = round((df['Sales'])*100/(100-(df['Discount']*100)),2)
df['Discounted Amount'] = df['Original Price'] - df['Sales']
df.head(2)

discounts = pd.pivot_table(data=df, index='Sub Category',
               values='Discounted Amount', 
               aggfunc='sum').reset_index().sort_values(by='Discounted Amount', ascending=False)
discounts

# fixing the graph size
plt.rcParams['figure.figsize'] = (15,20)

# setting up the background color
ax = plt.axes()
ax.set_facecolor('#2F2F2F')

# plotting a bar graph
sns.barplot(y='Sub Category', x='Discounted Amount', data=discounts, color='#FFCB74', linewidth=2, edgecolor='#F6F6F6')

# annotating the values on the bar graph
bbox_args = dict(boxstyle = 'round', fc = '1')
for p in ax.patches:
    width = p.get_width()
    plt.text(p.get_width(), p.get_y() + 0.5 * p.get_height(), '{:1.0f}'.format(width), 
             ha = 'center', 
             va = 'center', 
             color = 'black', 
             bbox = bbox_args, 
             fontsize = 15)

#formatting the graph
plt.title('Discounted Amount by Sub Category', fontsize = 18)
plt.tick_params(left=False, bottom=False, labelbottom=False)
plt.ylabel(None)
plt.show()

"""# Total Sales & Orders by Year"""

year_performance = pd.pivot_table(data=df, index='Order Year', values=['Order ID', 'Sales', 'Profit'], 
               aggfunc={'Order ID':'count', 'Sales':'sum', 'Profit':'sum'}).reset_index()
year_performance

# setting up the graph size
plt.rcParams['figure.figsize'] = (12,8)

# setting up the background color
ax = plt.axes()
ax.set_facecolor('#2F2F2F')

# plotting a bar graph
ax1 = sns.barplot(x='Order Year', y='Sales', data=year_performance, color='#FFCB74', linewidth=2, edgecolor='#F6F6F6')
plt.tick_params(left=False, labelleft=False)

# annotating the values on the graph
bbox_args = dict(boxstyle = 'round', fc = '1')
for p in ax.patches:
    height = p.get_height()
    plt.text(p.get_x() + 0.5 * p.get_width(), p.get_height(), '{:1.0f}'.format(height), 
             ha = 'center', 
             va = 'center', 
             color = 'black', 
             bbox = bbox_args, 
             fontsize = 15)

# setting up the dual axis
ax2 = ax1.twinx()

# plotting a line graph on the secondary axis
sns.lineplot(x='Order Year', y='Profit', data=year_performance, linewidth=4, marker='o')

# formatting the graph
plt.title('Year Wise Performance - Sales & Profit', fontsize = 18)
plt.ylabel(None)
plt.legend(['Profit'], loc='upper left')
plt.tick_params(right=False, labelright=False)
plt.show()

"""# Answering the Questions
# 1) Who are the most loyal customers?
Note: Customers who placed more than 45 orders every year

We'll pivot the values by using the .pivot_table() function and then filter it with the above condition.
"""

customers = pd.pivot_table(data=df, index='Customer Name', columns='Order Year', 
               values='Order ID', aggfunc='count')
customers = customers[(customers['2015']>45) & (customers['2016']>45) & (customers['2017']>45) & (customers['2018']>45)]
customers

"""Answer: Amrish and Arutra are the only customers that have placed more than 45 orders every year

#2) What is the rank of the sub category in 2018, that ranked the fifth in 2016?
Note: Take sales as the parameter to compute rank

We'll first pivot the data and then apply the rank() function.
"""

sales_sc = pd.pivot_table(data=df, index='Sub Category', columns = 'Order Year', values='Sales', aggfunc='sum').reset_index()
sales_sc['Rank_2016'] = sales_sc['2016'].rank(method='max', ascending=False)
sales_sc['Rank_2018'] = sales_sc['2018'].rank(method='max', ascending=False)
sales_sc.sort_values(by='Rank_2016')

"""Answer: Cakes ranked 5th in Sales in 2016. The rank of Cakes in 2018 is 8.

#3) Which Category is among the top 3 position in Sales, all the years?
"""

sales_c = pd.pivot_table(data=df, index='Category', columns = 'Order Year', values='Sales', aggfunc='sum').reset_index()
sales_c['2015_Rank'] = sales_c['2015'].rank(method='max', ascending=False)
sales_c['2016_Rank'] = sales_c['2016'].rank(method='max', ascending=False)
sales_c['2017_Rank'] = sales_c['2017'].rank(method='max', ascending=False)
sales_c['2018_Rank'] = sales_c['2018'].rank(method='max', ascending=False)
sales_c

sales_c[(sales_c['2015_Rank'] <=3) & (sales_c['2016_Rank'] <=3) & (sales_c['2017_Rank'] <=3) & (sales_c['2018_Rank'] <=3)]

"""Answer: Only the Eggs, Meat & Fish Category is consistent in the sales across years.

#4) Did the region with least Sales/Order record the least Profit/Order?
"""

sales_orders_region = pd.pivot_table(data=df, index='Region', values=['Order ID', 'Sales', 'Profit'], 
               aggfunc = {'Order ID':'count', 'Sales':'sum', 'Profit':'sum'}).reset_index().sort_values(by='Sales', ascending=False)
sales_orders_region['Sales Per Order'] = sales_orders_region['Sales']/sales_orders_region['Order ID']
sales_orders_region['Profit Per Order'] = sales_orders_region['Profit']/sales_orders_region['Order ID']
sales_orders_region[['Region', 'Sales Per Order', 'Profit Per Order']]

"""Answer: No, the region with the least Sales/Order is East, but it has the better Profit/Order than Central which has the least Profit/Order ratio.

#5) Which city has the more Chicken & Mutton lovers?
"""

mutton = df[(df['Sub Category'] == 'Mutton') | (df['Sub Category'] == 'Chicken')]

mutton_pivot = pd.pivot_table(data=mutton, index='City', 
                               values='Order ID', aggfunc='count').sort_values(by='Order ID', ascending=False)
mutton_pivot.head(1)

"""Answer: Customers from Kanyakumari have ordered chicken and mutton more times than others.

#6) Name three cities which have the highest Sales/Customers for Cakes and Chocolates.
"""

chocolate_cakes = df[(df['Sub Category'] == 'Cakes') | (df['Sub Category'] == 'Chocolates')]

avg_sales_per_customer = pd.pivot_table(data=chocolate_cakes, index='City', values=['Sales', 'Customer Name'], 
               aggfunc = {'Customer Name':'count', 'Sales':'sum'}).reset_index()
avg_sales_per_customer['Sales Per Customer'] = round(avg_sales_per_customer['Sales']/avg_sales_per_customer['Customer Name'], 2)
avg_sales_per_customer[['City','Sales Per Customer']].sort_values(by='Sales Per Customer', ascending=False).head(3)

"""Answer: Salem, Trichy and Namakkal are the three cities that have the highest Sales/Customer for Cakes and Chocolate sub categories.

#Conclusion
We delved into the grocery store sales dataset to find the summary metrics. We also framed few questions and answered them by performing data analysis. Framing our own questions to find answers from the dataset is a trait of a data analyst.
"""

